ras_jba_crop <- crop(ras_jba, poly[2,])
ras_erie.mask <- mask(ras_erie, poly[2,])
ras_erie.new = resample(ras_erie.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[3,])
ras_sc.mask <- mask(ras_sc, poly[3,])
ras_sc.new = resample(ras_sc.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[4,])
ras_huron.mask <- mask(ras_huron, poly[4,])
ras_huron.new = resample(ras_huron.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[5,])
ras_superior.mask <- mask(ras_superior, poly[5,])
ras_superior.new = resample(ras_superior.mask, ras_jba_crop, "bilinear")
print("Doing the mosaic")
mos <- mosaic(ras_jba,ras_sc.new, ras_erie.new, ras_ontario.new,ras_huron.new, ras_superior.new, fun = mean)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MosaicFloodplain/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
}
dir2 = c("q20", "Q50", "Q75", "Q100", "Q200", "Q500", "Q1500")
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MosaicFloodplain/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MosaicFloodplain/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
exportPath
writeRaster(mos, exportPath)
dir2 = c("Q20", "Q50", "Q75", "Q100", "Q200", "Q500", "Q1500")
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
library(raster)
library(rgdal)
### Path file
dir = c("rl20","rl50","rl75","rl100","rl200","rl500","rl1500")
dir2 = c("Q20", "Q50", "Q75", "Q100", "Q200", "Q500", "Q1500")
pdem <- raster("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Elevation/2019_PDEM_Ontario/FME_5B501365_1567605258170_2968/dataset/012e3632-22a2-49d8-bbaf-ad8fbc0d0ceb-South/PDEM_South.tif")
poly <- readOGR("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/lakes_extent/lakes_extent.shp")
#r <- as(r, "SpatialPixelsDataFrame")
#str(r@data)
#head(r@data)
rasterOptions(tmpdir = "C:/temp")
for (i in 2:4){
# open floddplain raster layer
print(dir2[i])
erie <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Erie_", dir[i], ".tif", sep = "", collapse = NULL)
ontario <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Ontario_", dir[i], ".tif", sep = "", collapse = NULL)
sc <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/St Claire_", dir[i], ".tif", sep = "", collapse = NULL)
huron <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Huron_", dir[i], ".tif", sep = "", collapse = NULL)
superior <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Superior_", dir[i], ".tif", sep = "", collapse = NULL)
jba <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Floodmodels/JBA_F2_layers/ON/CA_FLRF_UD_", dir2[i], "_RD_bespoke.tif", sep = "", collapse = NULL)
print("loading rasters")
ras_erie <- raster(erie)
ras_ontario <- raster(ontario)
ras_sc <- raster(sc)
ras_huron <- raster(huron)
ras_superior <- raster(superior)
ras_jba <- raster(jba)
## crop, mask and resample
print("crop, mask and resample")
ras_jba_crop <- crop(ras_jba, poly[1,])
ras_ontario.mask <- mask(ras_ontario, poly[1,])
ras_ontario.new = resample(ras_ontario.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[2,])
ras_erie.mask <- mask(ras_erie, poly[2,])
ras_erie.new = resample(ras_erie.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[3,])
ras_sc.mask <- mask(ras_sc, poly[3,])
ras_sc.new = resample(ras_sc.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[4,])
ras_huron.mask <- mask(ras_huron, poly[4,])
ras_huron.new = resample(ras_huron.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[5,])
ras_superior.mask <- mask(ras_superior, poly[5,])
ras_superior.new = resample(ras_superior.mask, ras_jba_crop, "bilinear")
print("Doing the mosaic")
mos <- mosaic(ras_jba,ras_sc.new, ras_erie.new, ras_ontario.new,ras_huron.new, ras_superior.new, fun = mean)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
}
library(raster)
library(rgdal)
### Path file
dir = c("rl20","rl50","rl75","rl100","rl200","rl500","rl1500")
dir2 = c("Q20", "Q50", "Q75", "Q100", "Q200", "Q500", "Q1500")
pdem <- raster("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Elevation/2019_PDEM_Ontario/FME_5B501365_1567605258170_2968/dataset/012e3632-22a2-49d8-bbaf-ad8fbc0d0ceb-South/PDEM_South.tif")
poly <- readOGR("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/lakes_extent/lakes_extent.shp")
#r <- as(r, "SpatialPixelsDataFrame")
#str(r@data)
#head(r@data)
rasterOptions(tmpdir = "C:/temp")
for (i in 2:3){
# open floddplain raster layer
print(dir2[i])
erie <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Erie_", dir[i], ".tif", sep = "", collapse = NULL)
ontario <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Ontario_", dir[i], ".tif", sep = "", collapse = NULL)
sc <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/St Claire_", dir[i], ".tif", sep = "", collapse = NULL)
huron <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Huron_", dir[i], ".tif", sep = "", collapse = NULL)
superior <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Superior_", dir[i], ".tif", sep = "", collapse = NULL)
jba <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Floodmodels/JBA_F2_layers/ON/CA_FLRF_UD_", dir2[i], "_RD_bespoke.tif", sep = "", collapse = NULL)
print("loading rasters")
ras_erie <- raster(erie)
ras_ontario <- raster(ontario)
ras_sc <- raster(sc)
ras_huron <- raster(huron)
ras_superior <- raster(superior)
ras_jba <- raster(jba)
## crop, mask and resample
print("crop, mask and resample")
ras_jba_crop <- crop(ras_jba, poly[1,])
ras_ontario.mask <- mask(ras_ontario, poly[1,])
ras_ontario.new = resample(ras_ontario.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[2,])
ras_erie.mask <- mask(ras_erie, poly[2,])
ras_erie.new = resample(ras_erie.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[3,])
ras_sc.mask <- mask(ras_sc, poly[3,])
ras_sc.new = resample(ras_sc.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[4,])
ras_huron.mask <- mask(ras_huron, poly[4,])
ras_huron.new = resample(ras_huron.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[5,])
ras_superior.mask <- mask(ras_superior, poly[5,])
ras_superior.new = resample(ras_superior.mask, ras_jba_crop, "bilinear")
print("Doing the mosaic")
mos <- mosaic(ras_jba,ras_sc.new, ras_erie.new, ras_ontario.new,ras_huron.new, ras_superior.new, fun = mean)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
}
dir2[i]
mos
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MosaicFloodplain/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
exportPath
writeRaster(mos, exportPath)
library(raster)
library(rgdal)
### Path file
dir = c("rl20","rl50","rl75","rl100","rl200","rl500","rl1500")
dir2 = c("Q20", "Q50", "Q75", "Q100", "Q200", "Q500", "Q1500")
pdem <- raster("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Elevation/2019_PDEM_Ontario/FME_5B501365_1567605258170_2968/dataset/012e3632-22a2-49d8-bbaf-ad8fbc0d0ceb-South/PDEM_South.tif")
poly <- readOGR("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/lakes_extent/lakes_extent.shp")
library(raster)
library(rgdal)
### Path file
dir = c("rl20","rl50","rl75","rl100","rl200","rl500","rl1500")
dir2 = c("Q20", "Q50", "Q75", "Q100", "Q200", "Q500", "Q1500")
pdem <- raster("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Elevation/2019_PDEM_Ontario/FME_5B501365_1567605258170_2968/dataset/012e3632-22a2-49d8-bbaf-ad8fbc0d0ceb-South/PDEM_South.tif")
poly <- readOGR("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/lakes_extent/lakes_extent.shp")
#r <- as(r, "SpatialPixelsDataFrame")
#str(r@data)
#head(r@data)
rasterOptions(tmpdir = "C:/temp")
for (i in 4:4){
# open floddplain raster layer
print(dir2[i])
erie <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Erie_", dir[i], ".tif", sep = "", collapse = NULL)
ontario <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Ontario_", dir[i], ".tif", sep = "", collapse = NULL)
sc <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/St Claire_", dir[i], ".tif", sep = "", collapse = NULL)
huron <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Huron_", dir[i], ".tif", sep = "", collapse = NULL)
superior <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MergeModel/Modified/Superior_", dir[i], ".tif", sep = "", collapse = NULL)
jba <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Floodmodels/JBA_F2_layers/ON/CA_FLRF_UD_", dir2[i], "_RD_bespoke.tif", sep = "", collapse = NULL)
print("loading rasters")
ras_erie <- raster(erie)
ras_ontario <- raster(ontario)
ras_sc <- raster(sc)
ras_huron <- raster(huron)
ras_superior <- raster(superior)
ras_jba <- raster(jba)
## crop, mask and resample
print("crop, mask and resample")
ras_jba_crop <- crop(ras_jba, poly[1,])
ras_ontario.mask <- mask(ras_ontario, poly[1,])
ras_ontario.new = resample(ras_ontario.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[2,])
ras_erie.mask <- mask(ras_erie, poly[2,])
ras_erie.new = resample(ras_erie.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[3,])
ras_sc.mask <- mask(ras_sc, poly[3,])
ras_sc.new = resample(ras_sc.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[4,])
ras_huron.mask <- mask(ras_huron, poly[4,])
ras_huron.new = resample(ras_huron.mask, ras_jba_crop, "bilinear")
ras_jba_crop <- crop(ras_jba, poly[5,])
ras_superior.mask <- mask(ras_superior, poly[5,])
ras_superior.new = resample(ras_superior.mask, ras_jba_crop, "bilinear")
print("Doing the mosaic")
mos <- mosaic(ras_jba,ras_sc.new, ras_erie.new, ras_ontario.new,ras_huron.new, ras_superior.new, fun = mean)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MosaicFloodplain/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
}
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MosaicFloodplain/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
exportPath
writeRaster(mos, exportPath)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/MosaicFloodplain/FL_GL_Mos_", dir[i], ".tif",sep = "", collapse = NULL)
exportPath
writeRaster(mosaic_raster, exportPath)
exportPath <- paste("I:/Business Intelligence/_Research_Analytics/Projects/FLOOD/Data/Hydrological/Data Great lake NETCDF/FL_GL_Mos_", dir2[i], ".tif",sep = "", collapse = NULL)
writeRaster(mos, exportPath)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages("githubinstall")
devtools::install_github('IRkernel/IRkernel')
install.packages("IRkernel")
IRkernel::installspec()
install.packages('devtools')
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
install.packages('devtools')
install.packages("IRkernel")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
作者：NorthPenguin
链接：https://www.jianshu.com/p/77c0c4531b35
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
devtools::install_github('IRkernel/IRkernel')
install.packages("devtools")
install.packages(c('httr', 'memoise', 'whisker', 'digest', 'rstudioapi', 'jsonlite', 'git2r', 'withr'))
library('devtools')
install.packages("usethis")
install.packages("usethis")
library(usethis)
library('devtools')
install_github('IRkernel/IRkernel')
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install_github('IRkernel/IRkernel')
install.packages("devtools")
install.packages(c('httr', 'memoise', 'whisker', 'digest', 'rstudioapi', 'jsonlite', 'git2r', 'withr'))
library('devtools')
install_github('IRkernel/IRkernel')
install.packages("usethis")
install.packages('usethis')
install.packages("devtools")
install.packages(c('httr', 'memoise', 'whisker', 'digest', 'rstudioapi', 'jsonlite', 'git2r', 'withr'))
library('devtools')
library("usethis")
install.packages("Rcpp")
library("Rcpp")
library("usethis")
library('devtools')
install_github('IRkernel/IRkernel')
uninstall("bakcports")
IRkernel::installspec()
install_github('IRkernel/IRkernel')
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
library(usethis)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("backports")
library(backports)
library(devtools)
install.packages(c('httr', 'memoise', 'whisker', 'digest', 'rstudioapi', 'jsonlite', 'git2r', 'withr'))
install.packages(c("httr", "memoise", "whisker", "digest", "rstudioapi", "jsonlite", "git2r", "withr"))
install_github('IRkernel/IRkernel')
install.packages("install_github")
library('devtools')
install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
install.packages('IRkernel')
install.packages("IRkernel")
IRkernel::installspec()
library(sp)
library(ggplot2)
install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('IRkernel')
IRkernel::installspec()
install.packages("IRkernel")
IRkernel::installspec()
jupyter kernelspec --version
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
install_github('armstrtw/rzmq')
install_github("takluyver/IRdisplay")
install_github("takluyver/IRkernel")
IRkernel::installspec()
library(tidyverse)
install.packages("tidyverse")
Sys.setenv(LANGUAGE='en')
setwd("C:/Users/EG65491/OneDrive - Co-operators/Desktop/Hackathon 2019")
RSP_ON_COLL <- read_csv("RSP_ON_COLL.csv")
library("extRemes")
library("readxl")
library("readr")
install.packages("tidyverse")
RSP_ON_COLL <- read_csv("RSP_ON_COLL.csv")
library(plotly)
install.packages("plotly")
library(plotly)
COLL_DATA <- RSP_ON_COLL %>%
select(
-c(airbags,
anti_theft_dsc_ind,
datasource,
diploma_above_bachelor,
diploma_bachelor,
diploma_college,
diploma_high_school,
diploma_no,
diploma_trades,
diploma_univ_certificate,
engine_availability,
engine_configuration,
engine_displacement,
engine_forced_induction,
engine_fuel,
engine_supplemental,
exposure,
fsa_m,
fuel_cons_city_l_per_100k,
fuel_cons_comb_l_per_100k,
fuel_cons_comb_mpg,
fuel_cons_hwy_l_per_100k,
fuel_cons_model_sim_score,
garagedpostalcode_cg,
homeowner_flag,
homeowner_ratio,
limit_amount_m,
mover_ratio,
multi_prod_dsc_ind,
multi_veh_dsc_ind,
nsf_flag,
occupation_arts,
occupation_business,
occupation_edu_gov,
occupation_health,
occupation_management,
occupation_other,
occupation_science,
occupation_service,
occupation_trades,
pol_op_cnt,
pol_veh_cnt,
tenant_flag,
theft_deterrent_system,
unemployed_rate,
veh_acq_type,
veh_gtr_op_dsc_ind,
veh_own_yrs,
vehiclecode_cg_4,
claim_count_new,
#not many levels:
convertible_indicator,
convictioncountmajor3yrs_cg,
convictioncriminal3yrs,
traffic_jam_assist
)
)
COLL_DATA$abs[is.na(COLL_DATA$abs)] <- -1
COLL_DATA$adaptive_cruise_control[is.na(COLL_DATA$adaptive_cruise_control)] <- 0
COLL_DATA$auto_parking[is.na(COLL_DATA$auto_parking)] <- 0
COLL_DATA$blind_spot[is.na(COLL_DATA$blind_spot)] <- 0
COLL_DATA$body_style_transition[is.na(COLL_DATA$body_style_transition)] <- '-1'
COLL_DATA$brake_assist[is.na(COLL_DATA$brake_assist)] <- 0
COLL_DATA$camera[is.na(COLL_DATA$camera)] <- 0
COLL_DATA$cargo_length[is.na(COLL_DATA$cargo_length)] <- 0
COLL_DATA$co2_emissions[is.na(COLL_DATA$co2_emissions)] <- mean(COLL_DATA$co2_emissions,na.rm = T)
COLL_DATA$credit_score <- ifelse(is.na(COLL_DATA$credit_score),COLL_DATA$credit_score_avg,COLL_DATA$credit_score)
COLL_DATA$credit_score[is.na(COLL_DATA$credit_score)] <- 3000
COLL_DATA$cross_traffic[is.na(COLL_DATA$cross_traffic)] <- 0
COLL_DATA$curb_weight[is.na(COLL_DATA$curb_weight)] <- 0
COLL_DATA$drive_train[is.na(COLL_DATA$drive_train)] <- 'X'
COLL_DATA$driver_count[is.na(COLL_DATA$driver_count)] <- 1
COLL_DATA$driver_monitor[is.na(COLL_DATA$driver_monitor)] <- 0
COLL_DATA$engine_cylinder[is.na(COLL_DATA$engine_cylinder)] <-99
COLL_DATA$headlight[is.na(COLL_DATA$headlight)] <- 0
COLL_DATA$hill_start[is.na(COLL_DATA$hill_start)] <- 0
COLL_DATA$horsepower[is.na(COLL_DATA$horsepower)] <- 0
COLL_DATA$household_income[is.na(COLL_DATA$household_income)] <- mean(COLL_DATA$household_income,na.rm = T)
COLL_DATA$lane_assist[is.na(COLL_DATA$lane_assist)] <- 0
COLL_DATA$mitigation_all_speed[is.na(COLL_DATA$mitigation_all_speed)] <- 0
COLL_DATA$mitigation_low_speed[is.na(COLL_DATA$mitigation_low_speed)] <- 0
COLL_DATA$perimeter_detection[is.na(COLL_DATA$perimeter_detection)] <- 0
COLL_DATA$programmable_key[is.na(COLL_DATA$programmable_key)] <- 0
COLL_DATA$price[is.na(COLL_DATA$price)] <- mean(COLL_DATA$price,na.rm = T)
COLL_DATA$size_code[is.na(COLL_DATA$size_code)] <-'L'
COLL_DATA$stability_control[is.na(COLL_DATA$stability_control)] <-0
COLL_DATA$traction_control[is.na(COLL_DATA$traction_control)] <-0
COLL_DATA$veh_age_when_pur[is.na(COLL_DATA$veh_age_when_pur)] <- mean(COLL_DATA$veh_age_when_pur,na.rm = T)
COLL_DATA$vehicleage_m[is.na(COLL_DATA$vehicleage_m)] <- mean(COLL_DATA$vehicleage_m,na.rm = T)
COLL_DATA$wheelbase[is.na(COLL_DATA$wheelbase)] <-0
COLL_DATA <- COLL_DATA %>% select(-c(credit_score_avg,credit_consent))
COLL_DATA2 <- COLL_DATA %>% mutate_if(is.character,as.factor)
install.packages("tidylog")
install.packages("summarytools")
install.packages("car")
install.packages("randomForest")
install.packages("car")
install.packages("MASS")
install.packages("modelr")
install.packages("plotly")
install.packages("plotly")
library(tidyverse)
library(tidylog)
library(summarytools)
library(car)
library(randomForest)
library(MASS)
library(modelr)
library(plotly)
COLL_DATA$abs[is.na(COLL_DATA$abs)] <- -1
COLL_DATA$adaptive_cruise_control[is.na(COLL_DATA$adaptive_cruise_control)] <- 0
COLL_DATA$auto_parking[is.na(COLL_DATA$auto_parking)] <- 0
COLL_DATA$blind_spot[is.na(COLL_DATA$blind_spot)] <- 0
COLL_DATA$body_style_transition[is.na(COLL_DATA$body_style_transition)] <- '-1'
COLL_DATA$brake_assist[is.na(COLL_DATA$brake_assist)] <- 0
COLL_DATA$camera[is.na(COLL_DATA$camera)] <- 0
COLL_DATA$cargo_length[is.na(COLL_DATA$cargo_length)] <- 0
COLL_DATA$co2_emissions[is.na(COLL_DATA$co2_emissions)] <- mean(COLL_DATA$co2_emissions,na.rm = T)
COLL_DATA$credit_score <- ifelse(is.na(COLL_DATA$credit_score),COLL_DATA$credit_score_avg,COLL_DATA$credit_score)
COLL_DATA$credit_score[is.na(COLL_DATA$credit_score)] <- 3000
COLL_DATA$cross_traffic[is.na(COLL_DATA$cross_traffic)] <- 0
COLL_DATA$curb_weight[is.na(COLL_DATA$curb_weight)] <- 0
COLL_DATA$drive_train[is.na(COLL_DATA$drive_train)] <- 'X'
COLL_DATA$driver_count[is.na(COLL_DATA$driver_count)] <- 1
COLL_DATA$driver_monitor[is.na(COLL_DATA$driver_monitor)] <- 0
COLL_DATA$engine_cylinder[is.na(COLL_DATA$engine_cylinder)] <-99
COLL_DATA$headlight[is.na(COLL_DATA$headlight)] <- 0
COLL_DATA$hill_start[is.na(COLL_DATA$hill_start)] <- 0
COLL_DATA$horsepower[is.na(COLL_DATA$horsepower)] <- 0
COLL_DATA$household_income[is.na(COLL_DATA$household_income)] <- mean(COLL_DATA$household_income,na.rm = T)
COLL_DATA$lane_assist[is.na(COLL_DATA$lane_assist)] <- 0
COLL_DATA$mitigation_all_speed[is.na(COLL_DATA$mitigation_all_speed)] <- 0
COLL_DATA$mitigation_low_speed[is.na(COLL_DATA$mitigation_low_speed)] <- 0
COLL_DATA$perimeter_detection[is.na(COLL_DATA$perimeter_detection)] <- 0
COLL_DATA$programmable_key[is.na(COLL_DATA$programmable_key)] <- 0
COLL_DATA$price[is.na(COLL_DATA$price)] <- mean(COLL_DATA$price,na.rm = T)
COLL_DATA$size_code[is.na(COLL_DATA$size_code)] <-'L'
COLL_DATA$stability_control[is.na(COLL_DATA$stability_control)] <-0
COLL_DATA$traction_control[is.na(COLL_DATA$traction_control)] <-0
COLL_DATA$veh_age_when_pur[is.na(COLL_DATA$veh_age_when_pur)] <- mean(COLL_DATA$veh_age_when_pur,na.rm = T)
COLL_DATA$vehicleage_m[is.na(COLL_DATA$vehicleage_m)] <- mean(COLL_DATA$vehicleage_m,na.rm = T)
COLL_DATA$wheelbase[is.na(COLL_DATA$wheelbase)] <-0
COLL_DATA <- COLL_DATA %>% select(-c(credit_score_avg,credit_consent))
COLL_DATA2 <- COLL_DATA %>% mutate_if(is.character,as.factor)
factor_columns <- c("abs",
"adaptive_cruise_control",
"assignedlossespd3yrs_cg",
"auto_parking",
"blind_spot",
"brake_assist",
"camera",
"cross_traffic",
"driver_monitor",
"engine_cylinder",
"er_enrolledind_cg",
"full_cov_ind",
"headlight",
"hill_start",
"lane_assist",
"mitigation_all_speed",
"mitigation_low_speed",
"oo_ind",
"perimeter_detection",
"preferredclientrating_cg",
"programmable_key",
"stability_control",
"suspensioncount_cg",
"traction_control")
COLL_DATA2[factor_columns] <-lapply(COLL_DATA2[factor_columns], factor)
## Creating a train and test sample
train_size <- round(0.7*dim(COLL_DATA2)[1])
set.seed(2)
train <- sample(1:nrow(COLL_DATA2),train_size)
COLL_DATA2$train_ind<- rep(0,dim(COLL_DATA2)[1])
COLL_DATA2$train_ind[train] <- 1
#200 trees
yhat200 <-predict(object = forest200,newdata = COLL_DATA2[-train,])
y200 <- COLL_DATA2[-train,"incurred_loss_m"]
sum_residuals200 <- (yhat200-y200)^2
rmse_forest200 <- sqrt(mean(sum_residuals200$incurred_loss_m,na.rm = TRUE))
# saveRDS(forest400, "./forest400.rds")
forest200 <- readRDS('forest200.rds')
forest400 <- readRDS('forest400.rds')
#200 trees
yhat200 <-predict(object = forest200,newdata = COLL_DATA2[-train,])
y200 <- COLL_DATA2[-train,"incurred_loss_m"]
sum_residuals200 <- (yhat200-y200)^2
rmse_forest200 <- sqrt(mean(sum_residuals200$incurred_loss_m,na.rm = TRUE))
library(tidyverse)
library(tidylog)
library(summarytools)
library(car)
library(randomForest)
library(MASS)
library(modelr)
library(plotly)
Sys.setenv(LANGUAGE='en')
setwd("C:/Users/EG65491/OneDrive - Co-operators/Desktop/Hackathon 2019")
RSP_ON_COLL <- read_csv("RSP_ON_COLL.csv")
